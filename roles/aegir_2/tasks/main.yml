---
# Installs Aegir3 (http://www.aegirproject.org)
# Assumes Debian, with MariaDB, Nginx, php-fpm

- name: "Gather facts"
  gather_facts:
    parallel: yes
  tags:
    - packages
    - packages-php
    - aegir-php

- name: civipress frontend | Apt update
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  tags:
    - front-end

- name: civipress frontend | Upgrade all apt packages
  apt: upgrade=dist force_apt_get=yes
  tags:
    - front-end

- name: civipress frontend | Install nginx
  apt:
    name: nginx
    state: present
  tags:
    - front-end

- name: civipress frontend | Enable ufw
  ufw:
    state: enabled
  tags:
    - front-end

- name: civipress frontend | Allow ssh on ufw
  ufw:
    rule: allow
    name: OpenSSH
  tags:
    - front-end

- name: civipress frontend | Allow http
  ufw: proto=tcp port=80 rule=allow
  tags:
    - front-end

- name: civipress frontend | Allow https
  ufw: proto=tcp port=443 rule=allow
  tags:
    - front-end

- name: civipress frontend | Allow apache
  ufw: proto=tcp port=443 rule=allow
  tags:
    - front-end

- name: civipress frontend | Allow port 6033 for ProxySQL
  ufw:
    rule: allow
    port: 6033
  tags:
    - front-end

- name: civipress frontend | Allow port 3000 for Orchestrator
  ufw:
    rule: allow
    port: 3000
  tags:
    - front-end

- name: civipress frontend | Install snap
  apt:
    name: snapd
    state: present
  tags:
    - front-end

- name: civipress frontend | Install core with snap
  snap:
    name: 
      - core
  tags:
    - front-end

- name: civipress frontend | Update snap package
  command: snap refresh core
  tags:
  - front-end

- name: civipress frontend | Install certbot with snap
  snap:
    name: 
      - certbot
    classic: yes
  tags:
    - front-end

- name: civipress frontend | Install packages
  apt:
    name: [
      python3,
      pip
    ]
    state: present
    install_recommends: no
  tags:
    - front-end

- name: civipress frontend | Install packages
  pip:
    name: pexpect
  tags:
    - front-end

- name: civipress frontend | Check for previous certbot configuration
  stat:
    path: /var/lib/letsencrypt
  register: letsencrypt_exists
  tags:
    - front-end

- name: civipress frontend | configure letsencrypt
  command: sudo certbot --nginx --non-interactive --agree-tos --domains {{hostvars[inventory_hostname]['preseed_hostname']}}.{{hostvars[inventory_hostname]['preseed_domain']}} --email {{ certbot_email }}
  tags:
    - front-end
  when: not letsencrypt_exists.stat.exists
  tags:
    - front-end

- name: percona | Install gnupg2, curl, pwgen
  apt:
    name: [
      gnupg2,
      curl,
      pwgen,
      python3,
      python3-pymysql,
      pip
    ]
    state: present
    install_recommends: no
  tags:
    - percona-step-1

- include_vars: "{{ ansible_distribution }}_{{ ansible_distribution_major_version }}.yml"
  when: phpversion is undefined
  tags:
    - packages
    - packages-php
    - aegir-php

- name: Debian | Add Sury.org apt reporitory key
  apt_key:
    url: "https://packages.sury.org/php/apt.gpg"
    state: present
    keyring: /etc/apt/trusted.gpg.d/php.gpg
  when: (phpversion == 7.4 or phpversion == 7.2 or phpversion == 7.1) and ansible_distribution == "Debian"
  tags:
    - packages
    - packages-php
    - aegir-php

- name: Ubuntu | Add Sury.org apt reporitory key
  apt_key:
    url: "https://packages.sury.org/php/apt.gpg"
    state: present
    keyring: /etc/apt/trusted.gpg.d/php.gpg
  when: (phpversion == 7.4 or phpversion == 7.3 or phpversion == 7.2 or phpversion == 7.1) and ansible_distribution == "Ubuntu" and (ansible_distribution_major_version == "16" or ansible_distribution_major_version == "20")
  tags:
    - packages
    - packages-php
    - aegir-php

- name: Debian | Add Sury.org repository
  apt_repository:
    repo: deb https://packages.sury.org/php/ {{ ansible_distribution_release }} main
    state: present
    update_cache: yes
  when: (phpversion == 7.4 or phpversion == 7.2 or phpversion == 7.1) and ansible_distribution == "Debian"
  tags:
    - packages
    - packages-php
    - aegir-php

- name: Debian | Add Sury.org repository
  apt_repository:
    repo: deb https://packages.sury.org/php/ {{ ansible_distribution_release }} main
    state: present
    update_cache: yes
  when: (phpversion == 7.4 or phpversion == 7.3 or phpversion == 7.2 or phpversion == 7.1) and ansible_distribution == "Debian"
  tags:
    - packages
    - packages-php
    - aegir-php

- name: Ubuntu | Add Sury.org repository
  apt_repository:
    repo: deb http://ppa.launchpad.net/ondrej/php/ubuntu {{ ansible_distribution_release }} main
    state: present
    update_cache: no
  when: (phpversion == 7.4 or phpversion == 7.3 or phpversion == 7.2 or phpversion == 7.1) and ansible_distribution == "Ubuntu" and ( ansible_distribution_major_version == "16" or ansible_distribution_major_version == "20")
  tags:
    - packages
    - packages-php
    - aegir-php

- name: Debian | Pin Sury repositories
  template: src=etc/apt/preferences.d/php-symbiotic dest=/etc/apt/preferences.d/php-symbiotic owner=root group=root mode=0444
  when: (phpversion == 7.4 or phpversion == 7.3 or phpversion == 7.2 or phpversion == 7.1) and (ansible_distribution == "Debian" or (ansible_distribution == "Ubuntu" and (ansible_distribution_major_version == "16" or ansible_distribution_major_version == "20")))
  tags:
    - packages
    - packages-php
    - aegir-php

- name: Preseed Aegir Debian configurations
  shell: "{{ item }} | debconf-set-selections"
  with_items:
    # - echo "debconf aegir/site string {{ inventory_hostname }}"
    # - echo "debconf aegir/db_host string 127.0.0.1"
    # - echo "debconf aegir/port string 6033"
    # - echo "debconf aegir/db_user string aegir_root"
    # - echo "debconf aegir/db_password password {{ aegir_mysql_pass }}"
    # - echo "debconf aegir/webserver string nginx"
    - echo "debconf aegir/site string {{ inventory_hostname }}"
    - echo "debconf aegir/db_host string {{ primary_percona_host }}"
    - echo "debconf aegir/db_user string aegir_root"
    - echo "debconf aegir/db_password password {{ aegir_mysql_pass }}"
    - echo "debconf aegir/webserver string nginx"
  tags:
    - packages
    - aegir-nginx
    - aegir-percona

- name: Making sure the drush package is removed (aegir3 installs through composer)
  apt: pkg=drush state=absent

- name: adding repo public key
  shell: sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 4F4EA0AAE5267A6C

- apt: update_cache=yes
  tags:
    - packages

- apt:
    name: "php{{ phpversion }}-fpm"
    state: present
    install_recommends: no
  when: "'aegir_apache' not in group_names"
  tags:
    - packages
    - packages-php
    - aegir-php

# nb: imagick is required by Mosaico
- apt:
    name: [
      "php{{ phpversion }}",
      "php{{ phpversion }}-bcmath",
      "php{{ phpversion }}-gd",
      "php{{ phpversion }}-cli",
      "php{{ phpversion }}-curl",
      "php{{ phpversion }}-intl",
      "php{{ phpversion }}-json",
      "php{{ phpversion }}-ldap",
      "php{{ phpversion }}-mysql",
      "php{{ phpversion }}-soap",
      "php{{ phpversion }}-zip",
      "php{{ phpversion }}-xsl",
      "php{{ phpversion }}-mbstring",
      "php{{ phpversion }}-zip",
      "php-imagick"
    ]
    state: present
    install_recommends: no
  tags:
    - packages
    - packages-php
    - aegir-php

# This is to help deal with Debian Stretch upgrades
- apt:
    name: [
      php5-fpm,
      php5-gd,
      php5-cli,
      php5-common,
      php5-curl,
      php5-intl,
      php5-json,
      php5-ldap,
      php5-mcrypt,
      php5-mysql,
      php5-xsl,
      php-soap
    ]
    state: absent
    install_recommends: no
  when: ansible_distribution_release == "stretch"
  tags:
    - packages
    - packages-php
    - aegir-php

- apt:
    name: [
      patch, # required for drush make
      pwgen,
      curl,
      gettext,
      xauth,
      xvfb,
      libxrender1,
      ttf-mscorefonts-installer,
      fonts-dejavu-core,
      imagemagick,
      acl
    ]
    state: present
    install_recommends: no
  tags:
    - packages

# A bit off topic, but too often had the issue where mailname was misconfigured
- copy: content="{{ inventory_hostname }}" dest=/etc/mailname
- file: path=/etc/mailname owner=root group=root mode=0644

- name: percona | Uninstall previous installations of Percona
  apt:
    name: 'percona-server*'
    state: absent
    autoremove: yes
  ignore_errors: yes
  tags:
    - percona-step-1

- name: percona | delete data directory
  file:
    state: absent
    path: /var/lib/mysql

- name: percona | delete data directory
  file:
    state: absent
    path: /var/lib/mysql-files

- name: percona | delete data directory
  file:
    state: absent
    path: /var/lib/mysql-keyring

- name: percona | get percona apt package
  shell: wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
  tags:
    - percona-step-1

- name: percona | dpkg percona package
  shell: sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
  tags:
    - percona-step-1

- name: percona | configure percona install for MySQL 8.0
  shell: sudo percona-release setup ps80
  tags:
    - percona-step-1

- name: percona | Install percona
  apt:
    name: percona-server-server
    state: present
    install_recommends: no
  tags:
    - percona-step-1

- name: civipress frontend | Configure my.cnf file
  template:
    src: etc/mysql/my.cnf
    dest: /etc/mysql/my.cnf
    owner: mysql
  tags:
    - front-end

- name: civipress frontend | restart percona
  service:
    name: mysql
    state: restarted
  tags:
    - front-end

- name: percona | Generate a root password for MySQL
  shell: pwgen 15 1 > /root/.mysql.root
  tags:
    - percona-step-1

- name: percona | install cryptography
  pip:
    name: cryptography
  tags:
    - percona-step-1

- name: percona | set the root password
  shell: mysql -uroot -e "ALTER USER 'root'@'localhost' identified with 'caching_sha2_password' by '`cat /root/.mysql.root`'"
  tags:
    - percona-step-1

- name: percona | get root password for mysql_secure_install
  slurp:
    src: /root/.mysql.root
  register: mysql_root_pass

- name: percona | remove test database
  mysql_db:
    login_user: root
    login_password: "{{ mysql_root_pass['content'] | b64decode | trim }}"
    name: test
    state: absent
  tags:
    - percona-step-1

- name: percona | remove anonymous user
  mysql_user:
    login_user: root
    login_password: "{{ mysql_root_pass['content'] | b64decode | trim }}"
    name: ''
    state: absent
  tags:
    - percona-step-1

- name: percona | remove remote root
  community.mysql.mysql_query:
    login_user: root
    login_password: "{{ mysql_root_pass['content'] | b64decode | trim }}"
    query:
      - DELETE FROM mysql.user WHERE User='root' AND Host NOT IN ('localhost', '127.0.0.1', '::1')
  tags:
    - percona-step-1

- name: percona | Install percona client
  apt:
    name: [
      percona-server-client,
      libperconaserverclient21-dev,
      python3-pexpect
    ]
    state: present
    install_recommends: no
  tags:
    - front-end


- name: civipress frontend | uninstall proxysql2
  shell: sudo apt remove proxysql2 -y
  tags:
    - front-end

- name: civipress frontend | delete data directory
  file:
    state: absent
    path: /var/lib/proxysql

- name: civipress frontend | install proxysql2
  shell: sudo apt install proxysql2 -y
  tags:
    - front-end

- name: civipress frontend | start proxysql
  service:
    name: proxysql
    state: started
  tags:
    - front-end

- name: percona | Generate a new password for proxysql admin user
  shell: pwgen 15 1 > /root/.mysql.proxy_admin
  tags:
    - front-end

- name: civipress frontend | read renew tls user password
  shell: cat /root/.mysql.proxy_admin
  register: renew_proxy_tls_pass

- name: civipress frontend | change admin password
  shell: mysql -u admin -padmin -h 127.0.0.1 -P 6032 -e "set admin-admin_credentials='admin:`cat /root/.mysql.proxy_admin`;radminuser:radminpass'"
  tags:
    - front-end

- name: civipress frontend | change admin password
  shell: mysql -u admin -padmin -h 127.0.0.1 -P 6032 -e "LOAD ADMIN VARIABLES TO RUNTIME"
  tags:
    - front-end

- name: civipress frontend | change admin password
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE ADMIN VARIABLES FROM RUNTIME"
  tags:
    - front-end

- name: civipress frontend | change admin password
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE ADMIN VARIABLES TO DISK"
  tags:
    - front-end

- name: civipress frontend | configure primary and secondary percona hosts
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "INSERT INTO mysql_servers (hostname, hostgroup_id, port, weight) VALUES ('{{primary_percona_host}}', 1, 3306, 1000)"
  tags:
    - front-end

- name: civipress frontend | configure primary and secondary percona hosts
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "INSERT INTO mysql_servers (hostname, hostgroup_id, port, weight) VALUES ('{{primary_percona_host}}', 2, 3306, 1000)"
  tags:
    - front-end

- name: civipress frontend | configure primary and secondary percona hosts
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "INSERT INTO mysql_servers (hostname, hostgroup_id, port, weight) VALUES ('{{secondary_percona_host}}', 2, 3306, 1000)"
  tags:
    - front-end

- name: civipress frontend | configure primary and secondary percona hosts
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "INSERT INTO mysql_replication_hostgroups (writer_hostgroup, reader_hostgroup) VALUES (1, 2)"
  tags:
    - front-end

- name: civipress frontend | configure primary and secondary percona hosts
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "LOAD MYSQL SERVERS TO RUNTIME"
  tags:
    - front-end

- name: civipress frontend | configure primary and secondary percona hosts
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE MYSQL SERVERS TO DISK"
  tags:
    - front-end

- name: civipress frontend | configure proxysql monitor user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "UPDATE global_variables SET variable_value='proxysql' WHERE variable_name='mysql-monitor_username'"
  tags:
    - front-end

- name: civipress frontend | configure proxysql monitor user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "UPDATE global_variables SET variable_value='{{proxysql_pass}}' WHERE variable_name='mysql-monitor_password'"
  tags:
    - front-end

- name: civipress frontend | configure proxysql monitor user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "LOAD MYSQL VARIABLES TO RUNTIME"
  tags:
    - front-end

- name: civipress frontend | configure proxysql monitor user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE MYSQL VARIABLES TO DISK;"
  tags:
    - front-end

- name: civipress frontend | install orchestrator
  apt:
    name: software-properties-common
    state: present
  tags:
    - front-end

- name: civipress frontend | install orchestrator
  shell: sudo add-apt-repository universe
  tags:
    - front-end

- name: civipress frontend | Apt update
  apt: update_cache=yes force_apt_get=yes cache_valid_time=3600
  tags:
    - front-end

- name: civipress frontend | Upgrade all apt packages
  apt: upgrade=dist force_apt_get=yes
  tags:
    - front-end

- name: civipress frontend | install orchestrator
  apt:
    name: alien
    state: present
  tags:
    - front-end

- name: civipress frontend | install orchestrator
  shell: sudo wget https://github.com/openark/orchestrator/releases/download/v3.2.6/orchestrator-3.2.6-1.x86_64.rpm
  tags:
    - front-end

- name: civipress frontend | install orchestrator
  shell: sudo alien orchestrator-3.2.6-1.x86_64.rpm
  tags:
    - front-end

- name: civipress frontend | install orchestrator
  shell: sudo dpkg -i orchestrator_3.2.6-2_amd64.deb
  tags:
    - front-end

- name: civipress frontend | install orchestrator client
  shell: sudo wget https://github.com/openark/orchestrator/releases/download/v3.2.6/orchestrator-client-3.2.6-1.x86_64.rpm
  tags:
    - front-end

- name: civipress frontend | install orchestrator client
  shell: sudo alien orchestrator-client-3.2.6-1.x86_64.rpm
  tags:
    - front-end

- name: civipress frontend | install orchestrator client
  shell: sudo dpkg -i orchestrator-client_3.2.6-2_amd64.deb
  tags:
    - front-end

- name: civipress frontend | install orchestrator cli
  shell: sudo wget https://github.com/outbrain/orchestrator/releases/download/v1.5.7/orchestrator-cli-1.5.7-1.x86_64.rpm
  tags:
    - front-end

- name: civipress frontend | install orchestrator cli
  shell: sudo alien orchestrator-client-3.2.6-1.x86_64.rpm
  tags:
    - front-end

- name: civipress frontend | install orchestrator cli
  shell: sudo dpkg -i orchestrator-client_3.2.6-2_amd64.deb
  tags:
    - front-end

- name: percona | Generate a password for orchestrator user
  shell: pwgen 15 1 > /root/.mysql.orch
  tags:
    - front-end

- name: percona | read replication user password
  shell: cat /root/.mysql.orch
  register: orch_pass

- name: civipress frontend | percona backend for orchestrator configuration
  shell: mysql -uroot -p`cat /root/.mysql.root` -e "DROP DATABASE orchestrator"
  ignore_errors: yes
  tags:
    - front-end

- name: civipress frontend | percona backend for orchestrator configuration
  shell: mysql -uroot -p`cat /root/.mysql.root` -e "CREATE DATABASE orchestrator"
  tags:
    - front-end

- name: civipress frontend | percona backend for orchestrator configuration
  shell: mysql -uroot -p`cat /root/.mysql.root` -e "DROP USER IF EXISTS 'orchestrator'@'127.0.0.1'"
  tags:
    - front-end

- name: civipress frontend | percona backend for orchestrator configuration
  shell: mysql -uroot -p`cat /root/.mysql.root` -e "CREATE USER 'orchestrator'@'127.0.0.1' IDENTIFIED BY '`cat /root/.mysql.orch`'"
  tags:
    - front-end

- name: civipress frontend | percona backend for orchestrator configuration
  shell: mysql -uroot -p`cat /root/.mysql.root` -e "GRANT ALL PRIVILEGES ON orchestrator.* TO 'orchestrator'@'127.0.0.1'"
  tags:
    - front-end

- name: civipress frontend | Configure orchestrator config file
  template:
    src: orchestrator.conf.json
    dest: /etc/orchestrator.conf.json
  tags:
    - front-end

- name: civipress frontend | restart orchestrator
  service:
    name: orchestrator
    state: restarted
  tags:
    - front-end

- name: percona | get percona apt package
  shell: wget https://repo.percona.com/apt/percona-release_latest.$(lsb_release -sc)_all.deb
  tags:
    - front-end

- name: percona | dpkg percona package
  shell: sudo dpkg -i percona-release_latest.$(lsb_release -sc)_all.deb
  tags:
    - front-end

- name: civipress frontend | Generate a renew tls user password for MySQL
  shell: pwgen 15 1 > /root/.mysql.renew_tls
  tags:
    - front-end

- name: civipress frontend | read renew tls user password
  shell: cat /root/.mysql.renew_tls
  register: renew_tls_pass

- name: civipress frontend | configure renew tls renewal user
  shell: mysql -uroot -p`cat /root/.mysql.root` -e "DROP USER IF EXISTS 'renew_tls_user'@'localhost'"
  tags:
    - front-end

- name: civipress frontend | configure renew tls renewal user
  shell: mysql -uroot -p`cat /root/.mysql.root` -e "CREATE USER IF NOT EXISTS 'renew_tls_user'@'localhost' IDENTIFIED BY '{{ renew_tls_pass.stdout }}'"
  tags:
    - front-end

- name: civipress frontend | configure renew tls renewal user
  shell: mysql -uroot -p`cat /root/.mysql.root` -e "GRANT CONNECTION_ADMIN ON *.* TO 'renew_tls_user'@'localhost'"
  tags:
    - front-end

- name: civipress frontend | Remove existing login path for tls user
  expect:
    command: mysql_config_editor remove --login-path=renew_tls_user@localhost
    responses:
      password: "{{ renew_tls_pass.stdout }}"
  tags:
    - front-end

- name: civipress frontend | Configure tls user to prevent bash script from having password written in plain text
  expect:
    command: mysql_config_editor set --login-path=renew_tls_user@localhost --host=localhost --user=renew_tls_user --password
    responses:
      password: "{{ renew_tls_pass.stdout }}"
  tags:
    - front-end

- name: civipress frontend | restart percona
  service:
    name: mysql
    state: restarted
  tags:
    - front-end

- name: civipress frontend | Create bash script for ssl renewal hook
  template:
    src: mysql-deploy.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/mysql-deploy.sh
    owner: root
    group: root
    mode: '0700'
  tags:
    - front-end

- name: civipress frontend | run bash script once to inject the token into the keyring_vault plugin conf file
  shell: bash /etc/letsencrypt/renewal-hooks/deploy/mysql-deploy.sh
  tags:
    - front-end

- name: civipress frontend | configure proxysql frontend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SET mysql-have_ssl=1"
  tags:
    - front-end

- name: civipress frontend | configure proxysql frontend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "LOAD MYSQL VARIABLES TO RUNTIME"
  tags:
    - front-end

- name: civipress frontend | configure proxysql frontend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE MYSQL VARIABLES TO DISK"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "UPDATE mysql_servers SET use_ssl=1 WHERE hostname='{{primary_percona_host}}'"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "UPDATE mysql_servers SET use_ssl=1 WHERE hostname='{{secondary_percona_host}}'"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "LOAD MYSQL SERVERS TO RUNTIME"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE MYSQL SERVERS TO DISK"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SET mysql-ssl_p2s_ca='/var/lib/proxysql/cacert.pem'"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SET mysql-ssl_p2s_cert='/var/lib/proxysql/fullchain.pem'"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SET mysql-ssl_p2s_key='/var/lib/proxysql/privkey.pem'"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "LOAD MYSQL VARIABLES TO RUNTIME"
  tags:
    - front-end

- name: civipress frontend | configure proxysql backend ssl
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE MYSQL VARIABLES TO DISK"
  tags:
    - front-end

- name: civipress frontend | Remove existing login path for proxysql tls user
  expect:
    command: mysql_config_editor remove --login-path=proxysql_user@localhost
    responses:
      password: "{{ renew_proxy_tls_pass.stdout }}"
  tags:
    - front-end

- name: civipress frontend | Configure proxysql tls user to prevent bash script from having password written in plain text
  expect:
    command: mysql_config_editor set --login-path=proxysql_user@localhost --host=127.0.0.1 --port=6032 --user=admin --password
    responses:
      password: "{{ renew_proxy_tls_pass.stdout }}"
  tags:
    - front-end

- name: civipress frontend | Create bash script for ssl renewal hook
  template:
    src: mysql-deploy-proxysql.sh
    dest: /etc/letsencrypt/renewal-hooks/deploy/mysql-deploy.sh
    owner: root
    group: root
    mode: '0700'
  tags:
    - front-end

- name: civipress frontend | run bash script once to inject the token into the keyring_vault plugin conf file
  shell: bash /etc/letsencrypt/renewal-hooks/deploy/mysql-deploy.sh
  tags:
    - front-end

- name: civipress frontend | restart proxysql
  service:
    name: proxysql
    state: restarted
  tags:
    - front-end

- name: civipress frontend | Configure my.cnf file to allow ssl
  template:
    src: my.cnf
    dest: /etc/mysql/my.cnf
    owner: mysql
  tags:
    - front-end

- name: civipress frontend | restart percona
  service:
    name: mysql
    state: restarted
  tags:
    - front-end

- name: civipress frontend | discover percona cluster in orchestrator
  shell: /usr/local/orchestrator/orchestrator -c discover -i {{ primary_percona_host_no_domain }} cli
  tags:
    - front-end

- name: civipress frontend | configure aegir_root user in proxysql
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "INSERT INTO mysql_users(username,password,default_hostgroup) VALUES ('aegir_root','{{aegir_mysql_pass}}',1);"
  tags:
    - front-end

- name: civipress frontend | configure aegir_root user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "LOAD MYSQL USERS TO RUNTIME"
  tags:
    - front-end

- name: civipress frontend | configure aegir_root user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE MYSQL USERS FROM RUNTIME"
  tags:
    - front-end

- name: civipress frontend | configure proxysql aegir_root user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE MYSQL USERS TO DISK"
  tags:
    - front-end

- name: civipress frontend | configure proxysql aegir_root user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SET mysql-set_query_lock_on_hostgroup=0"
  tags:
    - front-end

- name: civipress frontend | configure proxysql aegir_root user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "LOAD MYSQL VARIABLES TO RUNTIME"
  tags:
    - front-end

- name: civipress frontend | configure proxysql aegir_root user
  shell: mysql -u admin -p`cat /root/.mysql.proxy_admin` -h 127.0.0.1 -P 6032 -e "SAVE MYSQL VARIABLES TO DISK"
  tags:
    - front-end

- name: Get the Aegir repo key
  apt_key: url=http://debian.aegirproject.org/key.asc state=present
  tags:
    - aegir
    - aegir-repo

- name: Add the Aegir apt repository
  apt_repository:
    repo='deb http://debian.aegirproject.org unstable main'
    state=present
    update_cache=yes
  tags:
    - aegir
    - aegir-repo

- name: Ensure that our locales are enabled
  locale_gen:
    name: "{{ item }}"
    state: present
  with_items:
    - en_US.UTF-8
    - en_CA.UTF-8
    - fr_BE.UTF-8
    - fr_CA.UTF-8
    - fr_FR.UTF-8
    - ca_ES.UTF-8
    - es_ES.UTF-8
  tags:
    - aegir
    - aegir-locales

- name: download composer
  get_url:
    url: https://getcomposer.org/installer
    dest: /tmp/installer
  tags:
    - aegir-composer
    - aegir

- name: install composer
  shell: cat /tmp/installer | php -- --install-dir=/usr/local/bin
  args:
    creates: /usr/local/bin/composer
  tags: 
    - aegir-composer
    - aegir

- name: rename composer.phar to composer
  shell: mv /usr/local/bin/composer.phar /usr/local/bin/composer
  args:
    creates: /usr/local/bin/composer
  tags:
    - aegir-composer
    - aegir

- name: make composer executable
  file:
    path: /usr/local/bin/composer
    mode: a+x
    state: file
  tags:
    - aegir-composer
    - aegir

- name: Ensure that our php version is the correct one
  alternatives:
    name: php
    path: "/usr/bin/php{{ phpversion }}"
    link: yes
  tags:
    - aegir
    - aegir-php

- apt:
    name: aegir3
    state: present
    install_recommends: no
  tags:
    - aegircd